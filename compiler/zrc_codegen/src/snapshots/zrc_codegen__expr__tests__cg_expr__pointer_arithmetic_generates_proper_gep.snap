---
source: compiler/zrc_codegen/src/expr.rs
description: "fn test() {\n    let x: *i32;\n\n    // TEST: should create a GEP that is the same as \"x[4]\"\n    let y = x + 4 as usize;\n    // TEST: and the same, with -4:\n    let z = x - 4 as usize;\n\n    return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define void @test() !dbg !3 {
entry:
  %let_z = alloca ptr, align 8
  %let_y = alloca ptr, align 8
  %let_x = alloca ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %let_x, metadata !8, metadata !DIExpression()), !dbg !15
  call void @llvm.dbg.declare(metadata ptr %let_y, metadata !13, metadata !DIExpression()), !dbg !16
  %load = load ptr, ptr %let_x, align 8, !dbg !17
  %ptr_add = getelementptr i32, ptr %load, i64 4, !dbg !18
  store ptr %ptr_add, ptr %let_y, align 8, !dbg !16
  call void @llvm.dbg.declare(metadata ptr %let_z, metadata !14, metadata !DIExpression()), !dbg !19
  %load1 = load ptr, ptr %let_x, align 8, !dbg !20
  %ptr_sub = getelementptr i32, ptr %load1, i64 -4, !dbg !21
  store ptr %ptr_sub, ptr %let_z, align 8, !dbg !19
  ret void, !dbg !22
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 1, type: !4, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{!8, !13, !14}
!8 = !DILocalVariable(name: "x", scope: !9, file: !2, line: 2, type: !11)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 1, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 1, column: 11)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "\22i32\22", baseType: !12, dwarfAddressSpace: 0)
!12 = !DIBasicType(name: "i32")
!13 = !DILocalVariable(name: "y", scope: !9, file: !2, line: 5, type: !11)
!14 = !DILocalVariable(name: "z", scope: !9, file: !2, line: 7, type: !11)
!15 = !DILocation(line: 2, column: 9, scope: !9)
!16 = !DILocation(line: 5, column: 9, scope: !9)
!17 = !DILocation(line: 5, column: 13, scope: !9)
!18 = !DILocation(line: 5, column: 17, scope: !9)
!19 = !DILocation(line: 7, column: 9, scope: !9)
!20 = !DILocation(line: 7, column: 13, scope: !9)
!21 = !DILocation(line: 7, column: 17, scope: !9)
!22 = !DILocation(line: 9, column: 5, scope: !9)

