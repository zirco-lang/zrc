---
source: compiler/zrc_codegen/src/ty.rs
description: "enum VariableInt {\n    Eight: i8,\n    Sixteen: i16,\n}\n\nfn test() -> VariableInt {\n    // TEST: should generate a { usize, i16 (largest of values) }\n    let x: VariableInt;\n\n    // internal parameters\n    let y = x.__discriminant__;\n    let z = x.__value__;\n\n    return x;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define { i64, i16 } @test() !dbg !3 {
entry:
  %let_z = alloca i16, align 2
  %let_y = alloca i64, align 8
  %let_x = alloca { i64, i16 }, align 8
  call void @llvm.dbg.declare(metadata ptr %let_x, metadata !16, metadata !DIExpression()), !dbg !21
  call void @llvm.dbg.declare(metadata ptr %let_y, metadata !19, metadata !DIExpression()), !dbg !22
  %gep = getelementptr inbounds { i64, i16 }, ptr %let_x, i32 0, i32 0, !dbg !23
  %load = load i64, ptr %gep, align 4, !dbg !23
  store i64 %load, ptr %let_y, align 4, !dbg !22
  call void @llvm.dbg.declare(metadata ptr %let_z, metadata !20, metadata !DIExpression()), !dbg !24
  %gep1 = getelementptr inbounds { i64, i16 }, ptr %let_x, i32 0, i32 1, !dbg !25
  %load2 = load i16, ptr %gep1, align 2, !dbg !25
  store i16 %load2, ptr %let_z, align 2, !dbg !24
  %load3 = load { i64, i16 }, ptr %let_x, align 4, !dbg !26
  ret { i64, i16 } %load3, !dbg !26
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 6, type: !4, scopeLine: 6, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !15)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct { __discriminant__: usize, __value__: union { Eight: i8, Sixteen: i16 } }", scope: !2, file: !2, elements: !7)
!7 = !{!8, !10}
!8 = !DIDerivedType(tag: DW_TAG_member, name: "__discriminant__", scope: !2, file: !2, baseType: !9)
!9 = !DIBasicType(name: "usize")
!10 = !DIDerivedType(tag: DW_TAG_member, name: "__value__", scope: !2, file: !2, baseType: !11)
!11 = !DICompositeType(tag: DW_TAG_union_type, name: "union { Eight: i8, Sixteen: i16 }", scope: !2, file: !2, elements: !12)
!12 = !{!13, !14}
!13 = !DIBasicType(name: "i8")
!14 = !DIBasicType(name: "i16")
!15 = !{!16, !19, !20}
!16 = !DILocalVariable(name: "x", scope: !17, file: !2, line: 8, type: !6)
!17 = distinct !DILexicalBlock(scope: !18, file: !2, line: 6, column: 26)
!18 = distinct !DILexicalBlock(scope: !3, file: !2, line: 6, column: 26)
!19 = !DILocalVariable(name: "y", scope: !17, file: !2, line: 11, type: !9)
!20 = !DILocalVariable(name: "z", scope: !17, file: !2, line: 12, type: !11)
!21 = !DILocation(line: 8, column: 9, scope: !17)
!22 = !DILocation(line: 11, column: 9, scope: !17)
!23 = !DILocation(line: 11, column: 13, scope: !17)
!24 = !DILocation(line: 12, column: 9, scope: !17)
!25 = !DILocation(line: 12, column: 13, scope: !17)
!26 = !DILocation(line: 14, column: 12, scope: !17)
