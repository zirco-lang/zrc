---
source: compiler/zrc_codegen/src/stmt.rs
description: "fn get_bool() -> bool;\n\nfn test() {\n    // TEST: the proper `do..while` loop structure is created\n    do {\n        get_bool(); // for fake side effects\n    } while (get_bool())\n\n    return;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare i1 @get_bool()

define void @test() !dbg !3 {
entry:
  br label %body, !dbg !8

body:                                             ; preds = %header, %entry
  %call = call i1 @get_bool(), !dbg !11
  br label %header, !dbg !11

header:                                           ; preds = %body
  %call1 = call i1 @get_bool(), !dbg !13
  br i1 %call1, label %body, label %exit, !dbg !13

exit:                                             ; preds = %header
  ret void, !dbg !14
}

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 3, type: !4, scopeLine: 3, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !7)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "void")
!7 = !{}
!8 = !DILocation(line: 5, column: 5, scope: !9)
!9 = distinct !DILexicalBlock(scope: !10, file: !2, line: 3, column: 11)
!10 = distinct !DILexicalBlock(scope: !3, file: !2, line: 3, column: 11)
!11 = !DILocation(line: 6, column: 9, scope: !12)
!12 = distinct !DILexicalBlock(scope: !9, file: !2, line: 5, column: 8)
!13 = !DILocation(line: 7, column: 14, scope: !9)
!14 = !DILocation(line: 9, column: 5, scope: !9)

