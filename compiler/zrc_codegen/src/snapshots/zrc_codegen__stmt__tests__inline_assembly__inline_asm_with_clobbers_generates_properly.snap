---
source: compiler/zrc_codegen/src/stmt.rs
description: "fn test() {\n    let a: i32 = 10;\n    let result: i32 = 0;\n    // TEST: inline assembly with clobbers\n    asm(\"addl $1, $0\"\n        : \"=r\"(result)\n        : \"r\"(a)\n        : \"cc\", \"memory\");\n}\n"
expression: resulting_ir
snapshot_kind: text
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define {} @test() !dbg !3 {
entry:
  %let_result = alloca i32, align 4
  %let_a = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %let_a, metadata !9, metadata !DIExpression()), !dbg !14
  store i32 10, ptr %let_a, align 4, !dbg !14
  call void @llvm.dbg.declare(metadata ptr %let_result, metadata !13, metadata !DIExpression()), !dbg !15
  store i32 0, ptr %let_result, align 4, !dbg !15
  %load = load i32, ptr %let_a, align 4, !dbg !16
  %inline_asm = call i32 asm sideeffect "addl $1, $0", "=r,r,~{cc,memory}"(i32 %load), !dbg !16
  store i32 %inline_asm, ptr %let_result, align 4, !dbg !16
  ret {} zeroinitializer, !dbg !17
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 1, type: !4, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !8)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct {}", scope: !2, file: !2, elements: !7)
!7 = !{}
!8 = !{!9, !13}
!9 = !DILocalVariable(name: "a", scope: !10, file: !2, line: 2, type: !12)
!10 = distinct !DILexicalBlock(scope: !11, file: !2, line: 1, column: 11)
!11 = distinct !DILexicalBlock(scope: !3, file: !2, line: 1, column: 11)
!12 = !DIBasicType(name: "i32")
!13 = !DILocalVariable(name: "result", scope: !10, file: !2, line: 3, type: !12)
!14 = !DILocation(line: 2, column: 9, scope: !10)
!15 = !DILocation(line: 3, column: 9, scope: !10)
!16 = !DILocation(line: 7, column: 15, scope: !10)
!17 = !DILocation(line: 9, column: 1, scope: !10)
