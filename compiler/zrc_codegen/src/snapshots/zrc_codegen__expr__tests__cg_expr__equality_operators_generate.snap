---
source: compiler/zrc_codegen/src/expr.rs
description: "fn get_bool() -> bool;\n\nfn test() {\n    let a = get_bool();\n    let b = get_bool();\n\n    // TEST: should create an `icmp eq` instruction\n    let eq = a == b;\n\n    // TEST: should create an `icmp ne` instruction\n    let ne = a != b;\n}\n"
expression: resulting_ir
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

declare i1 @get_bool()

define {} @test() !dbg !3 {
entry:
  %let_ne = alloca i1, align 1
  %let_eq = alloca i1, align 1
  %let_b = alloca i1, align 1
  %let_a = alloca i1, align 1
  call void @llvm.dbg.declare(metadata ptr %let_a, metadata !9, metadata !DIExpression()), !dbg !16
  %call = call i1 @get_bool(), !dbg !17
  store i1 %call, ptr %let_a, align 1, !dbg !16
  call void @llvm.dbg.declare(metadata ptr %let_b, metadata !13, metadata !DIExpression()), !dbg !18
  %call1 = call i1 @get_bool(), !dbg !19
  store i1 %call1, ptr %let_b, align 1, !dbg !18
  call void @llvm.dbg.declare(metadata ptr %let_eq, metadata !14, metadata !DIExpression()), !dbg !20
  %load = load i1, ptr %let_a, align 1, !dbg !21
  %load2 = load i1, ptr %let_b, align 1, !dbg !22
  %cmp = icmp eq i1 %load, %load2, !dbg !22
  store i1 %cmp, ptr %let_eq, align 1, !dbg !20
  call void @llvm.dbg.declare(metadata ptr %let_ne, metadata !15, metadata !DIExpression()), !dbg !23
  %load3 = load i1, ptr %let_a, align 1, !dbg !24
  %load4 = load i1, ptr %let_b, align 1, !dbg !25
  %cmp5 = icmp ne i1 %load3, %load4, !dbg !25
  store i1 %cmp5, ptr %let_ne, align 1, !dbg !23
  ret {} zeroinitializer, !dbg !26
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 3, type: !4, scopeLine: 3, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !8)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "(struct {  })", scope: !2, file: !2, elements: !7)
!7 = !{}
!8 = !{!9, !13, !14, !15}
!9 = !DILocalVariable(name: "a", scope: !10, file: !2, line: 4, type: !12)
!10 = distinct !DILexicalBlock(scope: !11, file: !2, line: 3, column: 11)
!11 = distinct !DILexicalBlock(scope: !3, file: !2, line: 3, column: 11)
!12 = !DIBasicType(name: "bool")
!13 = !DILocalVariable(name: "b", scope: !10, file: !2, line: 5, type: !12)
!14 = !DILocalVariable(name: "eq", scope: !10, file: !2, line: 8, type: !12)
!15 = !DILocalVariable(name: "ne", scope: !10, file: !2, line: 11, type: !12)
!16 = !DILocation(line: 4, column: 9, scope: !10)
!17 = !DILocation(line: 4, column: 13, scope: !10)
!18 = !DILocation(line: 5, column: 9, scope: !10)
!19 = !DILocation(line: 5, column: 13, scope: !10)
!20 = !DILocation(line: 8, column: 9, scope: !10)
!21 = !DILocation(line: 8, column: 14, scope: !10)
!22 = !DILocation(line: 8, column: 19, scope: !10)
!23 = !DILocation(line: 11, column: 9, scope: !10)
!24 = !DILocation(line: 11, column: 14, scope: !10)
!25 = !DILocation(line: 11, column: 19, scope: !10)
!26 = !DILocation(line: 12, column: 1, scope: !10)
