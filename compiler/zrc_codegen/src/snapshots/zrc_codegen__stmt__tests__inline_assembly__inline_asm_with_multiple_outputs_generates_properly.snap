---
source: compiler/zrc_codegen/src/stmt.rs
description: "fn test() {\n    let a: i32 = 10;\n    let b: i32 = 20;\n    let sum: i32 = 0;\n    let diff: i32 = 0;\n    // TEST: inline assembly with multiple output operands\n    asm(\"movl $2, $0; subl $3, $1\"\n        : \"=r\"(sum), \"=r\"(diff)\n        : \"r\"(a), \"r\"(b));\n}\n"
expression: resulting_ir
snapshot_kind: text
---
; ModuleID = 'test.zr'
source_filename = "test.zr"

define {} @test() !dbg !3 {
entry:
  %let_diff = alloca i32, align 4
  %let_sum = alloca i32, align 4
  %let_b = alloca i32, align 4
  %let_a = alloca i32, align 4
  call void @llvm.dbg.declare(metadata ptr %let_a, metadata !9, metadata !DIExpression()), !dbg !16
  store i32 10, ptr %let_a, align 4, !dbg !16
  call void @llvm.dbg.declare(metadata ptr %let_b, metadata !13, metadata !DIExpression()), !dbg !17
  store i32 20, ptr %let_b, align 4, !dbg !17
  call void @llvm.dbg.declare(metadata ptr %let_sum, metadata !14, metadata !DIExpression()), !dbg !18
  store i32 0, ptr %let_sum, align 4, !dbg !18
  call void @llvm.dbg.declare(metadata ptr %let_diff, metadata !15, metadata !DIExpression()), !dbg !19
  store i32 0, ptr %let_diff, align 4, !dbg !19
  %load = load i32, ptr %let_a, align 4, !dbg !20
  %load1 = load i32, ptr %let_b, align 4, !dbg !21
  %inline_asm = call { i32, i32 } asm sideeffect "movl $2, $0; subl $3, $1", "=r,=r,r,r"(i32 %load, i32 %load1), !dbg !21
  %out0 = extractvalue { i32, i32 } %inline_asm, 0, !dbg !21
  store i32 %out0, ptr %let_sum, align 4, !dbg !21
  %out1 = extractvalue { i32, i32 } %inline_asm, 1, !dbg !21
  store i32 %out1, ptr %let_diff, align 4, !dbg !21
  ret {} zeroinitializer, !dbg !22
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "zrc test runner", isOptimized: false, flags: "zrc --fake-args", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false)
!2 = !DIFile(filename: "test.zr", directory: "/fake/path")
!3 = distinct !DISubprogram(name: "test", linkageName: "test", scope: null, file: !2, line: 1, type: !4, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !1, retainedNodes: !8)
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DICompositeType(tag: DW_TAG_structure_type, name: "struct {}", scope: !2, file: !2, elements: !7)
!7 = !{}
!8 = !{!9, !13, !14, !15}
!9 = !DILocalVariable(name: "a", scope: !10, file: !2, line: 2, type: !12)
!10 = distinct !DILexicalBlock(scope: !11, file: !2, line: 1, column: 11)
!11 = distinct !DILexicalBlock(scope: !3, file: !2, line: 1, column: 11)
!12 = !DIBasicType(name: "i32")
!13 = !DILocalVariable(name: "b", scope: !10, file: !2, line: 3, type: !12)
!14 = !DILocalVariable(name: "sum", scope: !10, file: !2, line: 4, type: !12)
!15 = !DILocalVariable(name: "diff", scope: !10, file: !2, line: 5, type: !12)
!16 = !DILocation(line: 2, column: 9, scope: !10)
!17 = !DILocation(line: 3, column: 9, scope: !10)
!18 = !DILocation(line: 4, column: 9, scope: !10)
!19 = !DILocation(line: 5, column: 9, scope: !10)
!20 = !DILocation(line: 9, column: 15, scope: !10)
!21 = !DILocation(line: 9, column: 23, scope: !10)
!22 = !DILocation(line: 10, column: 1, scope: !10)
