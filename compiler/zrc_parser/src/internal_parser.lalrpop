// DO NOT IMPORT DIRECTLY -- USE API EXPOSED BY MODULE parser INSTEAD

use zrc_utils::{span::Spanned, spanned};

use super::{
    lexer,
    ast::{
        expr::*,
        stmt::*,
        ty::*,
    }
};

grammar<'input>(file_name: &'static str);

Spanned<T>: Spanned<T> = {
    <l:@L> <x:T> <r:@R> => spanned!(l, x, r, file_name),
}
SpannedExpr<T>: Expr<'input> = {
    <Spanned<T>> => Expr(<>),
}
SpannedStmt<T>: Stmt<'input> = {
    <Spanned<T>> => Stmt(<>),
}

#[inline]
CommaSeparated<T>: Vec<T> = {
    <e:T> <mut v:("," <T>)*> ","? => {
        let mut new = vec![e];
        new.append(&mut v);
        new
    }
};

#[inline]
CommaSeparatedWithoutTrailing<T>: Vec<T> = {
    <e:T> <mut v:("," <T>)*> => {
        let mut new = vec![e];
        new.append(&mut v);
        new
    }
}

pub Program: Vec<Spanned<Declaration<'input>>> = Spanned<Declaration>*;

// See https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers for why this
// is necessary. The ClosedStmt rule REQUIRES that an 'else' clause is used, meaning that it will
// attach to the inner 'if' statement.
Stmt: Stmt<'input> = {
    SpannedStmt<OpenStmt>,
    SpannedStmt<ClosedStmt>
}

OpenStmt: StmtKind<'input> = {
    "if" "(" <e:Expr> ")" <s:Stmt> => StmtKind::IfStmt(e, Box::new(s), None),
    "if" "(" <a:Expr> ")" <b:SpannedStmt<ClosedStmt>> "else" <c:SpannedStmt<OpenStmt>> => 
        StmtKind::IfStmt(a, Box::new(b), Some(Box::new(c))),
    "while" "(" <a:Expr> ")" <b:SpannedStmt<OpenStmt>> => StmtKind::WhileStmt(a, Box::new(b)),
    "do" <b:SpannedStmt<OpenStmt>> "while" "(" <a:Expr> ")" ";" => StmtKind::DoWhileStmt(Box::new(b), a),
    "for" "(" <a:Spanned<LetDeclaration>> <b:Expr?> ";" <c:Expr?> ")" <d:SpannedStmt<OpenStmt>> => StmtKind::ForStmt {
        init: Some(Box::new(a)),
        cond: b,
        post: c,
        body: Box::new(d)
    },
    "for" "(" ";" <b:Expr?> ";" <c:Expr?> ")" <d:SpannedStmt<OpenStmt>> => StmtKind::ForStmt {
        init: None,
        cond: b,
        post: c,
        body: Box::new(d)
    },
};

ClosedStmt: StmtKind<'input> = {
    <SimpleStmt>,

    "if" "(" <a:Expr> ")" <b:SpannedStmt<ClosedStmt>> "else" <c:SpannedStmt<ClosedStmt>> =>
        StmtKind::IfStmt(a, Box::new(b), Some(Box::new(c))),
    "while" "(" <a:Expr> ")" <b:SpannedStmt<ClosedStmt>> => StmtKind::WhileStmt(a, Box::new(b)),
    "do" <b:SpannedStmt<ClosedStmt>> "while" "(" <a:Expr> ")" ";" => StmtKind::DoWhileStmt(Box::new(b), a),
    "for" "(" <a:Spanned<LetDeclaration>> <b:Expr?> ";" <c:Expr?> ")" <d:SpannedStmt<ClosedStmt>> => StmtKind::ForStmt {
        init: Some(Box::new(a)),
        cond: b,
        post: c,
        body: Box::new(d)
    },
    "for" "(" ";" <b:Expr?> ";" <c:Expr?> ")" <d:SpannedStmt<ClosedStmt>> => StmtKind::ForStmt {
        init: None,
        cond: b,
        post: c,
        body: Box::new(d)
    },
};

SimpleStmt: StmtKind<'input> = {
    <Expr> ";" => StmtKind::ExprStmt(<>),
    ";" => StmtKind::EmptyStmt,
    "{" <l:StmtList?> "}" => StmtKind::BlockStmt(l.unwrap_or(Vec::new())),
    "switch" "(" <scrutinee:Expr> ")" "{" <cases:Spanned<SwitchCase>*> "}" => StmtKind::SwitchCase {
        scrutinee,
        cases,
    },
    "match" "(" <scrutinee:Expr> ")" "{" <cases:Spanned<MatchCase>*> "}" => StmtKind::Match {
        scrutinee,
        cases,
    },
    <FlowStmt>,
    <Spanned<LetDeclaration>> => StmtKind::DeclarationList(<>),
};

SwitchCase: SwitchCase<'input> = {
    <e:Expr> "=>" <s:Stmt> => SwitchCase(SwitchTrigger::Expr(e), s),
    "default" "=>" <s:Stmt> => SwitchCase(SwitchTrigger::Default, s),
};

MatchCase: MatchCase<'input> = {
    <variant:IDENTIFIER> ":" <var:IDENTIFIER> "=>" <body:Stmt> => MatchCase {
        variant,
        var,
        body,
    }
}

// For declarations at the global scope
Declaration: Declaration<'input> = {
    <FunctionDeclaration>,
    <StructOrUnionDeclaration>,
    <TypeAliasDeclaration>,
    <GlobalLetDeclaration>,
};

FunctionDeclaration: Declaration<'input> = {
    "fn" <i:Spanned<IDENTIFIER>> "(" <a:Spanned<ArgumentDeclarationList?>> ")" <r:("->" <Type>)?>
        <s:Spanned<("{" <StmtList?> "}")>> => Declaration::FunctionDeclaration {
        name: i,
        parameters: a.map(|inner| inner.unwrap_or(ArgumentDeclarationList::empty())),
        return_type: r,
        body: Some(s.map(|inner| inner.unwrap_or(Vec::new()))),
    },
    "fn" <i:Spanned<IDENTIFIER>> "(" <a:Spanned<ArgumentDeclarationList?>> ")" <r:("->" <Type>)?> ";" => Declaration::FunctionDeclaration {
        name: i,
        parameters: a.map(|inner| inner.unwrap_or(ArgumentDeclarationList::empty())),
        return_type: r,
        body: None,
    }
};

TypeAliasDeclaration: Declaration<'input> = {
    "type" <i:Spanned<IDENTIFIER>> "=" <t:TypeInDeclaration> ";" => Declaration::TypeAliasDeclaration {
        name: i,
        ty: t,
    },
}

GlobalLetDeclaration: Declaration<'input> = {
    <Spanned<LetDeclaration>> => Declaration::GlobalLetDeclaration(<>),
}

// Type that allows parentheses - use in declaration contexts
TypeInDeclaration: Type<'input> = {
    <Type>,
    "(" <TypeInDeclaration> ")" => <>,
}

// The key-type mapping of a struct or union, including the {}
KeyTypeMapping: KeyTypeMapping<'input> = {
    "{" <list:Spanned<CommaSeparated<Spanned<(<Spanned<IDENTIFIER>> ":" <TypeInDeclaration>)>>?>> "}" => 
        KeyTypeMapping(list.map(|inner| inner.unwrap_or(Vec::new()))),
}

StructOrUnionDeclaration: Declaration<'input> = {
    Spanned<("struct" <Spanned<IDENTIFIER>> <KeyTypeMapping>)> => Declaration::TypeAliasDeclaration {
        name: <>.value().0,
        ty: Type(<>.map(|(_, values)| TypeKind::Struct(values))),
    },
    Spanned<("union" <Spanned<IDENTIFIER>> <KeyTypeMapping>)> => Declaration::TypeAliasDeclaration {
        name: <>.value().0,
        ty: Type(<>.map(|(_, values)| TypeKind::Union(values))),
    },
    Spanned<("enum" <Spanned<IDENTIFIER>> <KeyTypeMapping>)> => Declaration::TypeAliasDeclaration {
        name: <>.value().0,
        ty: Type(<>.map(|(_, values)| TypeKind::Enum(values))),
    },
};

ArgumentDeclarationList: ArgumentDeclarationList<'input> = {
    <CommaSeparated<Spanned<ArgumentDeclaration>>> => ArgumentDeclarationList::NonVariadic(<>),
    <CommaSeparatedWithoutTrailing<Spanned<ArgumentDeclaration>>> "," "..." => ArgumentDeclarationList::Variadic(<>),
};

ArgumentDeclaration: ArgumentDeclaration<'input> = {
    <i:Spanned<IDENTIFIER>> ":" <t:Type> => ArgumentDeclaration {
        name: i,
        ty: t
    }
};

LetDeclaration: Vec<Spanned<LetDeclaration<'input>>> = {
    "let" <l:CommaSeparatedWithoutTrailing<
        Spanned<(<Spanned<IDENTIFIER>> <(":" <Type>)?> <("=" <Assignment>)?>)>
    >> ";" => l.into_iter().map(|sp| sp.map(|(i, t, v)| LetDeclaration {
        name: i,
        ty: t,
        value: v,
    })).collect::<Vec<_>>(),
};

pub Type: Type<'input> = {
    Spanned<IDENTIFIER> => Type(<>.map(|x| TypeKind::Identifier(x))),
    Spanned<("*" <TypeOrParenthesizedType>)> => Type(<>.map(|x| TypeKind::Ptr(Box::new(x)))),
    Spanned<("struct" <KeyTypeMapping>)> => 
        Type(<>.map(TypeKind::Struct)),
    Spanned<("union" <KeyTypeMapping>)> =>
        Type(<>.map(TypeKind::Union)),
    Spanned<("enum" <KeyTypeMapping>)> =>
        Type(<>.map(TypeKind::Enum)),
}

TypeOrParenthesizedType: Type<'input> = {
    <Type>,
    "(" <TypeOrParenthesizedType> ")" => <>,
}

FlowStmt: StmtKind<'input> = {
    "continue" ";" => StmtKind::ContinueStmt,
    "break" ";" => StmtKind::BreakStmt,
    "return" <e:Expr?> ";" => StmtKind::ReturnStmt(e),
};

pub StmtList: Vec<Stmt<'input>> = Stmt+;

pub Expr: Expr<'input> = Comma;

// Because ( <EXPR> ) should be spanned as ( @L <EXPR> @R ) not @L ( <EXPR> ) @R, Primary must
// yield Expr so it can preserve a unique span. This means all other varients must also yield Primary
// however, this requires a lot of boilerplate to wrap in spans. Because of this, we declare this way.
// Takes T,Next: ExprKind and adds Next as the next layer while also wrapping all Ts in a span.
// This makes overall handling spans much easier.
//
// So, in essence:
//     _Comma: ExprKind = {
//         <l:Comma> "," <r:Assignment> => ExprKind::Comma(Box::new(l), Box::new(r)),
//     }
//     Comma: Expr = ExprPrecedenceTier<_Comma, Assignment>;
// Is equivalent to:
//     Comma: Expr = {
//         <s:@L> <l:Comma> "," <r:Assignment> <e:@R> => Expr(Spanned(s, ExprKind::Comma(Box::new(l), Box::new(r)), e)),
//         <Assignment>,
//     }
ExprPrecedenceTier<T, Next>: Expr<'input> = {
    SpannedExpr<T>,
    <Next>,
}

_Comma: ExprKind<'input> = {
    <l:Comma> "," <r:Assignment> => ExprKind::Comma(Box::new(l), Box::new(r)),
}
Comma = ExprPrecedenceTier<_Comma, Assignment>;

_Assignment: ExprKind<'input> = {
    <lhs:Unary> "=" <rhs:Assignment> => ExprKind::Assignment(Assignment::Standard, Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> "+=" <rhs:Assignment> => ExprKind::Assignment(Assignment::Arithmetic(Arithmetic::Addition), Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> "-=" <rhs:Assignment> => ExprKind::Assignment(Assignment::Arithmetic(Arithmetic::Subtraction), Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> "*=" <rhs:Assignment> => ExprKind::Assignment(Assignment::Arithmetic(Arithmetic::Multiplication), Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> "/=" <rhs:Assignment> => ExprKind::Assignment(Assignment::Arithmetic(Arithmetic::Division), Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> "%=" <rhs:Assignment> => ExprKind::Assignment(Assignment::Arithmetic(Arithmetic::Modulo), Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> "&=" <rhs:Assignment> => ExprKind::Assignment(Assignment::BinaryBitwise(BinaryBitwise::And), Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> "|=" <rhs:Assignment> => ExprKind::Assignment(Assignment::BinaryBitwise(BinaryBitwise::Or), Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> "^=" <rhs:Assignment> => ExprKind::Assignment(Assignment::BinaryBitwise(BinaryBitwise::Xor), Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> "<<=" <rhs:Assignment> => ExprKind::Assignment(Assignment::BinaryBitwise(BinaryBitwise::Shl), Box::new(lhs), Box::new(rhs)),
    <lhs:Unary> ">>=" <rhs:Assignment> => ExprKind::Assignment(Assignment::BinaryBitwise(BinaryBitwise::Shr), Box::new(lhs), Box::new(rhs)),
};
Assignment = ExprPrecedenceTier<_Assignment, Ternary>;

_Ternary: ExprKind<'input> = {
    <l:Logical> "?" <c:Expr> ":" <r:Ternary> => ExprKind::Ternary(Box::new(l), Box::new(c), Box::new(r)),
};
Ternary = ExprPrecedenceTier<_Ternary, Logical>;

Logical: Expr<'input> = LogicalOr;
_LogicalOr: ExprKind<'input> = {
    <l:LogicalOr> "||" <r:LogicalAnd> => ExprKind::Logical(Logical::Or, Box::new(l), Box::new(r)),
};
LogicalOr = ExprPrecedenceTier<_LogicalOr, LogicalAnd>;
_LogicalAnd: ExprKind<'input> = {
    <l:LogicalAnd> "&&" <r:Equality> => ExprKind::Logical(Logical::And, Box::new(l), Box::new(r)),
};
LogicalAnd = ExprPrecedenceTier<_LogicalAnd, Bitwise>;

Bitwise: Expr<'input> = BitwiseOr;
_BitwiseOr: ExprKind<'input> = {
    <l:BitwiseOr> "|" <r:BitwiseXor> => ExprKind::BinaryBitwise(BinaryBitwise::Or, Box::new(l), Box::new(r)),
};
BitwiseOr: Expr<'input> = ExprPrecedenceTier<_BitwiseOr, BitwiseXor>;
_BitwiseXor: ExprKind<'input> = {
    <l:BitwiseXor> "^" <r:BitwiseAnd> => ExprKind::BinaryBitwise(BinaryBitwise::Xor, Box::new(l), Box::new(r)),
};
BitwiseXor: Expr<'input> = ExprPrecedenceTier<_BitwiseXor, BitwiseAnd>;
_BitwiseAnd: ExprKind<'input> = {
    <l:BitwiseAnd> "&" <r:Equality> => ExprKind::BinaryBitwise(BinaryBitwise::And, Box::new(l), Box::new(r)),
}
BitwiseAnd: Expr<'input> = ExprPrecedenceTier<_BitwiseAnd, Equality>;

_Equality: ExprKind<'input> = {
    <l:Equality> "==" <r:Comparison> => ExprKind::Equality(Equality::Eq, Box::new(l), Box::new(r)),
    <l:Equality> "!=" <r:Comparison> => ExprKind::Equality(Equality::Neq, Box::new(l), Box::new(r)),
};
Equality: Expr<'input> = ExprPrecedenceTier<_Equality, Comparison>;

_Comparison: ExprKind<'input> = {
    <l:Comparison> ">" <r:BitShift> => ExprKind::Comparison(Comparison::Gt, Box::new(l), Box::new(r)),
    <l:Comparison> ">=" <r:BitShift> => ExprKind::Comparison(Comparison::Gte, Box::new(l), Box::new(r)),
    <l:Comparison> "<" <r:BitShift> => ExprKind::Comparison(Comparison::Lt, Box::new(l), Box::new(r)),
    <l:Comparison> "<=" <r:BitShift> => ExprKind::Comparison(Comparison::Lte, Box::new(l), Box::new(r)),
};
Comparison: Expr<'input> = ExprPrecedenceTier<_Comparison, BitShift>;

_BitShift: ExprKind<'input> = {
    <l:BitShift> ">>" <r:Term> => ExprKind::BinaryBitwise(BinaryBitwise::Shr, Box::new(l), Box::new(r)),
    <l:BitShift> "<<" <r:Term> => ExprKind::BinaryBitwise(BinaryBitwise::Shl, Box::new(l), Box::new(r)),
};
BitShift: Expr<'input> = ExprPrecedenceTier<_BitShift, Term>;

_Term: ExprKind<'input> = {
    <l:Term> "+" <r:Factor> => ExprKind::Arithmetic(Arithmetic::Addition, Box::new(l), Box::new(r)),
    <l:Term> "-" <r:Factor> => ExprKind::Arithmetic(Arithmetic::Subtraction, Box::new(l), Box::new(r)),
};
Term: Expr<'input> = ExprPrecedenceTier<_Term, Factor>;

_Factor: ExprKind<'input> = {
    <l:Factor> "/" <r:Cast> => ExprKind::Arithmetic(Arithmetic::Division, Box::new(l), Box::new(r)),
    <l:Factor> "*" <r:Cast> => ExprKind::Arithmetic(Arithmetic::Multiplication, Box::new(l), Box::new(r)),
    <l:Factor> "%" <r:Cast> => ExprKind::Arithmetic(Arithmetic::Modulo, Box::new(l), Box::new(r)),
};
Factor: Expr<'input> = ExprPrecedenceTier<_Factor, Cast>;

_Cast: ExprKind<'input> = {
    <e:Unary> "as" <t:Type> => ExprKind::Cast(Box::new(e), t),
};
Cast: Expr<'input> = ExprPrecedenceTier<_Cast, Unary>;

_Unary: ExprKind<'input> = {
    "!" <Unary> => ExprKind::UnaryNot(Box::new(<>)),
    "-" <Unary> => ExprKind::UnaryMinus(Box::new(<>)),
    "~" <Unary> => ExprKind::UnaryBitwiseNot(Box::new(<>)),
    "&" <Unary> => ExprKind::UnaryAddressOf(Box::new(<>)),
    "*" <Unary> => ExprKind::UnaryDereference(Box::new(<>)),
};
Unary: Expr<'input> = ExprPrecedenceTier<_Unary, Postfix>;

_Postfix: ExprKind<'input> = {
    <x:Postfix> "[" <i:Expr> "]" => ExprKind::Index(Box::new(x), Box::new(i)),
    <l:Postfix> "." <r:Spanned<IDENTIFIER>> => ExprKind::Dot(Box::new(l), r),
    <l:Postfix> "->" <r:Spanned<IDENTIFIER>> => ExprKind::Arrow(Box::new(l), r),
    <i:Postfix> <c:Spanned<("(" <ArgumentList?> ")")>> => ExprKind::Call(Box::new(i), c.map(|x| x.unwrap_or(Vec::new()))),
};
Postfix: Expr<'input> = ExprPrecedenceTier<_Postfix, Primary>;

ArgumentList: Vec<Expr<'input>> = CommaSeparated<Assignment>;

StructFieldInit: Spanned<(Spanned<&'input str>, Expr<'input>)> = {
    <Spanned<(<Spanned<IDENTIFIER>> ":" <Assignment>)>>,
};

StructFieldInitList: Vec<Spanned<(Spanned<&'input str>, Expr<'input>)>> = {
    <e:StructFieldInit> <mut v:("," <StructFieldInit>)*> => {
        let mut new = vec![e];
        new.append(&mut v);
        new
    }
};

Primary: Expr<'input> = {
    Spanned<(<NUMBER> <Spanned<IDENTIFIER>?>)> => Expr(<>.map(|(n, ty)| ExprKind::NumberLiteral(n, ty.map(|t| Type(t.map(TypeKind::Identifier)))))),
    Spanned<STRING> => Expr(<>.map(|s| ExprKind::StringLiteral(s))),
    Spanned<CHAR> => Expr(<>.map(|c| ExprKind::CharLiteral(c))),
    Spanned<IDENTIFIER> => Expr(<>.map(|i| ExprKind::Identifier(i))),
    Spanned<"true"> => Expr(<>.map(|_| ExprKind::BooleanLiteral(true))),
    Spanned<"false"> => Expr(<>.map(|_| ExprKind::BooleanLiteral(false))),
    Spanned<("sizeof" <Type>)> => Expr(<>.map(|t| ExprKind::SizeOfType(t))),
    Spanned<("sizeof" "(" <Expr> ")")> => Expr(<>.map(|ex| ExprKind::SizeOfExpr(Box::new(ex)))),
    // Struct construction: new Type { fields }
    <s:@L> "new" <ty:Type> "{" <fields:StructFieldInitList?> "}" <e:@R> => 
        Expr(spanned!(s, ExprKind::StructConstruction(
            ty, 
            spanned!(s, fields.unwrap_or(Vec::new()), e, file_name)
        ), e, file_name)),
    "(" <Expr> ")" => <>,
};

extern {
    type Location = usize;
    type Error = Spanned<lexer::LexicalError<'input>>;

    enum lexer::Tok<'input> {
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Star,
        "/" => lexer::Tok::Slash,
        "%" => lexer::Tok::Percent,

        "==" => lexer::Tok::EqEq,
        "!=" => lexer::Tok::NotEq,
        ">" => lexer::Tok::Greater,
        ">=" => lexer::Tok::GreaterEq,
        "<" => lexer::Tok::Less,
        "<=" => lexer::Tok::LessEq,

        "&&" => lexer::Tok::LogicalAnd,
        "||" => lexer::Tok::LogicalOr,
        "!" => lexer::Tok::LogicalNot,

        "&" => lexer::Tok::BitwiseAnd,
        "|" => lexer::Tok::BitwiseOr,
        "^" => lexer::Tok::BitwiseXor,
        "~" => lexer::Tok::BitwiseNot,
        "<<" => lexer::Tok::BitwiseLeftShift,
        ">>" => lexer::Tok::BitwiseRightShift,

        "=" => lexer::Tok::Assign,
        "+=" => lexer::Tok::PlusAssign,
        "-=" => lexer::Tok::MinusAssign,
        "*=" => lexer::Tok::StarAssign,
        "/=" => lexer::Tok::SlashAssign,
        "%=" => lexer::Tok::PercentAssign,
        "&=" => lexer::Tok::BitwiseAndAssign,
        "|=" => lexer::Tok::BitwiseOrAssign,
        "^=" => lexer::Tok::BitwiseXorAssign,
        "<<=" => lexer::Tok::BitwiseLeftShiftAssign,
        ">>=" => lexer::Tok::BitwiseRightShiftAssign,

        ";" => lexer::Tok::Semicolon,
        "," => lexer::Tok::Comma,
        "." => lexer::Tok::Dot,
        "?" => lexer::Tok::QuestionMark,
        ":" => lexer::Tok::Colon,

        "(" => lexer::Tok::LeftParen,
        ")" => lexer::Tok::RightParen,
        "{" => lexer::Tok::LeftBrace,
        "}" => lexer::Tok::RightBrace,
        "[" => lexer::Tok::LeftBracket,
        "]" => lexer::Tok::RightBracket,

        STRING => lexer::Tok::StringLiteral(<lexer::ZrcString<'input>>),
        CHAR => lexer::Tok::CharLiteral(<lexer::StringTok<'input>>),
        NUMBER => lexer::Tok::NumberLiteral(<lexer::NumberLiteral<'input>>),
        IDENTIFIER => lexer::Tok::Identifier(<&'input str>),

        "true" => lexer::Tok::True,
        "false" => lexer::Tok::False,
        "if" => lexer::Tok::If,
        "else" => lexer::Tok::Else,
        "while" => lexer::Tok::While,
        "do" => lexer::Tok::Do,
        "for" => lexer::Tok::For,
        "break" => lexer::Tok::Break,
        "continue" => lexer::Tok::Continue,
        "return" => lexer::Tok::Return,
        "let" => lexer::Tok::Let,
        "fn" => lexer::Tok::Fn,
        "as" => lexer::Tok::As,
        "struct" => lexer::Tok::Struct,
        "union" => lexer::Tok::Union,
        "enum" => lexer::Tok::Enum,
        "match" => lexer::Tok::Match,
        "sizeof" => lexer::Tok::SizeOf,
        "type" => lexer::Tok::Type,
        "switch" => lexer::Tok::Switch,
        "default" => lexer::Tok::Default,
        "new" => lexer::Tok::New,
        "->" => lexer::Tok::SmallArrow,
        "=>" => lexer::Tok::FatArrow,
        "..." => lexer::Tok::Ellipsis,
    }
}